import json
from threading import Thread

from modelscope import AutoModelForCausalLM, AutoTokenizer
from transformers import TextIteratorStreamer

device = "cuda:1"  # the device to load the model onto

# path = "model_hub/qwen2_0.5B_instruct"
path = "output/qwen2_0.5B_uie/checkpoint-226000"

model = AutoModelForCausalLM.from_pretrained(
    path,
    torch_dtype="auto",
).to(device).eval()
tokenizer = AutoTokenizer.from_pretrained(path)

prompt = "输入三支篮球队的名称并生成一个适当的口号。输入：俄克拉荷马城雷霆队，芝加哥公牛队，布鲁克林网队。"
prompt = "你是谁？"
prompt = "文本: 男子以帮找工作名义骗钱被警方抓获 \n【事件抽取】事件类型列表=['财经/交易-出售/收购', '财经/交易-跌停', '财经/交易-加息', '财经/交易-降价', '财经/交易-降息', '财经/交易-融资', '财经/交易-上市', '财经/交易-涨价', '财经/交易-涨停', '产品行为-发布', '产品行为-获奖', '产品行为-上映', '产品行为-下架', '产品行为-召回', '交往-道歉', '交往-点赞', '交往-感谢', '交往-会见', '交往-探班', '竞赛行为-夺冠', '竞赛行为-晋级', '竞赛行为-禁赛', '竞赛行为-胜负', '竞赛行为-退赛', '竞赛行为-退役', '人生-产子/女', '人生-出轨', '人生-订婚', '人生-分手', '人生-怀孕', '人生-婚礼', '人生-结婚', '人生-离婚', '人生-庆生', '人生-求婚', '人生-失联', '人生-死亡', '司法行为-罚款', '司法行为-拘捕', '司法行为-举报', '司法行为-开庭', '司法行为-立案', '司法行为-起诉', '司法行为-入狱', '司法行为-约谈', '灾害/意外-爆炸', '灾害/意外-车祸', '灾害/意外-地震', '灾害/意外-洪灾', '灾害/意外-起火', '灾害/意外-坍/垮塌', '灾害/意外-袭击', '灾害/意外-坠机', '组织关系-裁员', '组织关系-辞/离职', '组织关系-加盟', '组织关系-解雇', '组织关系-解散', '组织关系-解约', '组织关系-停职', '组织关系-退出', '组织行为-罢工', '组织行为-闭幕', '组织行为-开幕', '组织行为-游行']，论元角色列表=['刑期', '领投方', '立案机构', '怀孕者', '失联者', '融资金额', '出生者', '产子者', '地点', '罢工人员', '原所属组织', '融资轮次', '会见主体', '致谢人', '庆祝方', '加息幅度', '加盟者', '开庭案件', '受伤人数', '加息机构', '约谈对象', '奖项', '发布方', '胜者', '裁员人数', '禁赛机构', '上映方', '坍塌主体', '死者', '死亡人数', '退役者', '被下架方', '订婚主体', '震级', '开庭法院', '赛事名称', '降价幅度', '举报对象', '交易物', '会见对象', '生日方年龄', '拘捕者', '解约方', '降价物', '被拘捕者', '被感谢人', '被解约方', '裁员方', '道歉对象', '被告', '求婚者', '降价方', '罢工人数', '夺冠赛事', '执法机构', '探班主体', '罚款对象', '探班对象', '死者年龄', '袭击对象', '收购方', '被解雇人员', '获奖人', '解散方', '跌停股票', '解雇方', '退赛赛事', '震源深度', '入狱者', '约谈发起方', '召回内容', '颁奖机构', '退赛方', '生日方', '退出方', '出售价格', '禁赛时长', '所加盟组织', '立案对象', '游行人数', '融资方', '活动名称', '出售方', '降息幅度', '上映影视', '袭击者', '游行组织', '涨停股票', '降息机构', '时间', '出轨方', '出轨对象', '离职者', '道歉者', '所属组织', '上市企业', '震中', '发布产品', '原告', '结婚双方', '涨价方', '点赞对象', '参礼人员', '下架产品', '涨价幅度', '被禁赛人员', '离婚双方', '涨价物', '跟投方', '点赞方', '晋级方', '晋级赛事', '求婚对象', '败者', '下架方', '召回方', '停职人员', '分手双方', '罚款金额', '举报发起方', '冠军']。我希望你根据事件类型列表和论元角色列表从给定的文本中抽取可能的事件，并以json[{'trigger':'', 'type':'', 'arguments': {角色:论元}},]的格式回答。\n答案："
# prompt = "文本: 蒙德兰维尔面积3.17平方千米，位于法国诺曼底大区卡尔瓦多斯省，该省份为法国西北部沿海省份，北濒大西洋英吉利海峡，东北与滨海塞纳省以海上边界相接，东临厄尔省，南至奥恩省，西与芒什省接壤。与蒙德兰维尔接壤的市镇（或旧市镇、城区）包括：奥东河畔巴龙、舍村、加夫吕、奥东河畔格兰维尔、穆昂、奥东河畔图维尔。蒙德兰维尔的时区为UTC+01:00、UTC+02:00（夏令时）。 \n【关系抽取】已知关系列表=['国籍', '别名', '亲属', '后继者', '出生地点', '父母', '职业', '所在行政领土', '类型', '属于', '运营者', '位于', '拥有者', '所属组织', '职务', '取代', '参与', '相邻车站', '行政中心', '接壤', '兄弟姊妹', '死因', '平台', '作者', '产地', '隶属于', '衍生作品', '原产地', '父级分类单元', '分类等级', '死亡地点', '配偶', '体育代表国', '主张者', '军事冲突', '参与者', '创办者', '领导者', '河流出口', '籍贯', '学历', '途径', '开发者', '出版商', '制作者', '演员', '编剧', '导演', '成员', '专业', '从属于', '作品', '分布', '所属山脉', '导致', '发生地点', '制造商', '事件', '成就', '提名或入围奖项', '子组织', '改编自', '表演者', '总部位置', '重大事件', '提名者', '当选人', '当选选举', '车站等级', '经销商', '发现者', '目前所在行政区', '获胜者', '主办方', '角色', '奖项', '名称由来', '用途', '材料', '产品', '作词者', '包含', '博士生', '病因', '可能后果', '流入水域', '机场服务地区', '临近', '同事', '前任', '签署方', '受众', '所属系列', '创始人', '流出河流', '产业', '水源', '学生', '品牌', '博士生导师', '成立地点', '民族', '老师', '主要食物来源', '运营', '流经湖泊', '加害人', '型号', '结束原因', '学名', '获胜赛事', '立法者', '症状', '插画家', '主要作品', '疗法', '用药', '起因', '版权所有者', '宣判罪名', '发现者或发明者', '主持人', '赞助者', '首播电视台', '损害', '被告人', '法院', '影响因素', '创建者', '教区', '生成物', '杀害者', '刑罚', '赞助商', '栖息地', '受害人', '制作方法', '传播方式']\n阅读以上内容，根据列表抽取关系三元组，文本中可能包含哪些关系三元组？请按照json[{'relation':'', 'head':'', 'tail':''}, ]的格式回答。\n答案："
# prompt = "文本: 哈伊马角统治者阿联酋决心加快与世界各国的经济合作。阿通社阿布扎比2023年6月15日，阿拉伯联合酋长国联邦最高委员会成员，哈伊马角统治者谢赫萨乌德本萨克尔阿尔卡西米殿下，最近在2023年圣彼得堡国际经济论坛开幕式上发表讲话。在讲话中，他表达了阿联酋总统谢赫穆罕默德本扎耶德阿勒纳哈扬殿下的领导下，对加强与全球各国的经济合作以确保为子孙后代创造一个可持续繁荣未来的坚定决心。\n哈伊马角统治者表示我代表谢赫穆罕默德本扎耶德阿勒纳哈扬殿下，感谢弗拉基米尔普京总统和俄罗斯政府盛情邀请阿联酋作为本届论坛的荣誉嘉宾参加圣彼得堡国际经济论坛。阿联酋在本届论坛中作为主宾国参加。\n谢赫萨乌德，率领阿联酋代表团参加论坛，他进一步提到阿联酋正在积极寻求创造一个基于科学、人工智能、绿色能源和技术的知识驱动的未来，因此我们的一个规模相当大的代表团正在参加论坛。我们坚信，这种高级别的参与将有助于推动我们与其他国家的关系和合作。\n谢赫萨乌德还表示，面对全球持续存在的问题，特别是在可持续性、粮食安全和气候变化等领域，以及在向知识经济转型的过程中，需要更大程度的合作和整合。他强调，阿联酋正在加快努力，以加强繁荣和深化稳定，同时推动非石油收入和投资多样化。\n阿联酋将于2023年11月在迪拜世博城主办《联合国气候变化框架公约》第28届缔约方大会（COP28），以加快气候行动，实现国际承诺，将全球变暖控制在不超过1.5如在巴黎达成的协议，并团结世界寻找解决方案，应对挑战，抓住机遇，确保为今世和后代创造可持续的未来。谢赫萨乌德补充说，COP28将是阿联酋最重要的活动之一，因为它提供了一个国际集体行动的平台，通过将未来升温限制在1.5C来实现全球气候承诺。\n此次圣彼得堡国际经济论坛（SPIEF 2023）于6月14日至17日由俄罗斯主办。阿联酋的高级代表团，包括各部委、机构、政府机构以及公共和私营部门的主要国家公司的代表，正在参加这次论坛。 \n【实体抽取】给定的候选实体类型是【机构/人名】\n根据给定候选实体类型抽取，在这个文本中可能包含哪些实体？你可以先识别出实体, 再判断实体类型。以json{机构/人名：[实体]}格式输出。\n答案："
# prompt = "文本: 历任公司副总经理、总工程师， \n【实体抽取】给定的候选实体类型是国籍/学历/姓名/组织/民族/职称/专业/籍贯\n根据给定候选实体类型抽取，在这个文本中可能包含哪些实体？你可以先识别出实体, 再判断实体类型。以json{实体类型：[实体]}格式输出。\n答案："
# prompt = "Text: His third victory equalled those of Achiel Buysse , Fiorenzo Magni , Eric Leman and Johan Museeuw . \n【Named Entity Recognition】From the given text, extract all the entities and types. Please format the answer in json {location/person/organization：[entities]}. \nAnswer:"
# prompt="文本: 国际有识之士为何不相信美国涉华人权谎言。（国际观察）国际有识之士为何不相信美国涉华人权谎言\n新华社记者\n美国政府日前以所谓强迫劳动为由对一些中国企业实施制裁，再次凸显美国的霸道与霸凌。美方近年来在涉疆、涉港、涉藏等问题上频频干涉中国内政，编造各种谎言来抹黑中国人权状况。与此同时，美国政客对本国愈演愈烈的种族歧视、枪支暴力等严重侵犯人权问题却听之任之、无所作为。\n华盛顿的政客们为何如此关心中国人权、漠视本国人权？难道是因为他们爱中国超过爱美国吗？\n古巴外交部长罗德里格斯一针见血地指出为操纵和恐吓不服从华盛顿利益的国家，美国正把人权当作一种工具。\n就是为了阻碍中国的发展\n2022年10月6日，联合国人权理事会第51届会议对美国牵头提交的一项涉疆问题决定草案进行表决。美国试图将这份草案包装成一个程序问题，但国际社会的眼睛是雪亮的，草案遭到多数成员国反对，未获通过。当投票结果公布时 \n【实体抽取】阅读以上内容，抽取文本中所有实体及类型，以json{人物/组织/地点：[实体]}格式输出。\n答案："
# prompt = "文本: 欧洲理事会主席：欧盟计划向摩尔多瓦武装部队增供军事装备。俄罗斯卫星通讯社莫斯科5月4日电 欧洲理事会主席查尔斯·米歇尔在结束与摩尔多瓦总统玛雅·桑杜的会谈后举行的联合记者会上表示， 欧盟计划向摩尔多瓦武装部队提供额外的军事装备。  米歇尔说：  “今年，我们计划通过向摩尔多瓦武装部队提供额外的军事装备来大幅增加对摩尔多瓦的支持。\"  他表示，欧盟还将在打击虚假信息和网络攻击方面提供支持。  米歇尔指出，去年，欧盟为此曾向摩尔多瓦拨款700万欧元。  这一问题不涉及武器供应，此前的援助包括向摩尔多瓦提供弹药回收处理设备以及军队用医疗和后勤装备。 米歇尔表示，不会详细列举计划提供的援助内容，因为这个问题仍在讨论当中。\n \n【事件抽取】已知论元角色列表是['援助名称', '时间', '地点', '援助国家', '被援助国家', '援助机构', '被援助机构', '援助方式', '援助目的', '援助周期', '援助协议', '涉及人物']，我希望你根据论元角色列表从给定的输入中抽取可能的论元，以json{角色:论元,}格式输出。\n答案："
prompt = "文本:氧化锆陶瓷以其卓越的物理和化学特性在多个行业中发挥着关键作用。这种材料因其高强度、高硬度和优异的耐磨性，广泛应用于医疗器械、切削工具、磨具以及高端珠宝制品。在制造这种高性能陶瓷时，必须遵循严格的制造标准，以确保其最终性能。这些标准涵盖了从原材料选择到成品加工的全过程，保障产品的一致性和可靠性。氧化锆的制造过程通常包括粉末合成、成型、烧结和后处理等步骤。原材料通常是高纯度的氧化锆粉末，通过精确控制的烧结工艺，这些粉末被转化成具有特定微观结构的坚硬陶瓷。这种独特的微观结构赋予氧化锆陶瓷其显著的抗断裂韧性和耐腐蚀性。此外，氧化锆陶瓷的热膨胀系数与铁类似，使其在高温应用中展现出良好的热稳定性。因此，氧化锆陶瓷不仅在工业领域，也在日常生活中的应用日益增多，成为现代材料科学中的一个重要分支。\n【实体抽取】抽取文本中可能存在的实体，并以json{制造品名称/制造过程/制造材料/工艺参数/应用/生物医学/工程特性：[实体]}格式输出。\n答案："
prompt = "文本: AC米兰退出下赛季欧联杯，参加欧战的资格也就顺延给了本赛季排名在他们身后的罗马和都灵，对于红狼来说，他们可以跳过欧联杯资格赛，直接进入欧联杯小组赛，而都灵则得到了一个参加资格赛的名额。 \n【事件抽取】给定的事件类型列表是['财经/交易-出售/收购', '财经/交易-跌停', '财经/交易-加息', '财经/交易-降价', '财经/交易-降息', '财经/交易-融资', '财经/交易-上市', '财经/交易-涨价', '财经/交易-涨停', '产品行为-发布', '产品行为-获奖', '产品行为-上映', '产品行为-下架', '产品行为-召回', '交往-道歉', '交往-点赞', '交往-感谢', '交往-会见', '交往-探班', '竞赛行为-夺冠', '竞赛行为-晋级', '竞赛行为-禁赛', '竞赛行为-胜负', '竞赛行为-退赛', '竞赛行为-退役', '人生-产子/女', '人生-出轨', '人生-订婚', '人生-分手', '人生-怀孕', '人生-婚礼', '人生-结婚', '人生-离婚', '人生-庆生', '人生-求婚', '人生-失联', '人生-死亡', '司法行为-罚款', '司法行为-拘捕', '司法行为-举报', '司法行为-开庭', '司法行为-立案', '司法行为-起诉', '司法行为-入狱', '司法行为-约谈', '灾害/意外-爆炸', '灾害/意外-车祸', '灾害/意外-地震', '灾害/意外-洪灾', '灾害/意外-起火', '灾害/意外-坍/垮塌', '灾害/意外-袭击', '灾害/意外-坠机', '组织关系-裁员', '组织关系-辞/离职', '组织关系-加盟', '组织关系-解雇', '组织关系-解散', '组织关系-解约', '组织关系-停职', '组织关系-退出', '组织行为-罢工', '组织行为-闭幕', '组织行为-开幕', '组织行为-游行']，论元角色列表是['刑期', '领投方', '立案机构', '怀孕者', '失联者', '融资金额', '出生者', '产子者', '地点', '罢工人员', '原所属组织', '融资轮次', '会见主体', '致谢人', '庆祝方', '加息幅度', '加盟者', '开庭案件', '受伤人数', '加息机构', '约谈对象', '奖项', '发布方', '胜者', '裁员人数', '禁赛机构', '上映方', '坍塌主体', '死者', '死亡人数', '退役者', '被下架方', '订婚主体', '震级', '开庭法院', '赛事名称', '降价幅度', '举报对象', '交易物', '会见对象', '生日方年龄', '拘捕者', '解约方', '降价物', '被拘捕者', '被感谢人', '被解约方', '裁员方', '道歉对象', '被告', '求婚者', '降价方', '罢工人数', '夺冠赛事', '执法机构', '探班主体', '罚款对象', '探班对象', '死者年龄', '袭击对象', '收购方', '被解雇人员', '获奖人', '解散方', '跌停股票', '解雇方', '退赛赛事', '震源深度', '入狱者', '约谈发起方', '召回内容', '颁奖机构', '退赛方', '生日方', '退出方', '出售价格', '禁赛时长', '所加盟组织', '立案对象', '游行人数', '融资方', '活动名称', '出售方', '降息幅度', '上映影视', '袭击者', '游行组织', '涨停股票', '降息机构', '时间', '出轨方', '出轨对象', '离职者', '道歉者', '所属组织', '上市企业', '震中', '发布产品', '原告', '结婚双方', '涨价方', '点赞对象', '参礼人员', '下架产品', '涨价幅度', '被禁赛人员', '离婚双方', '涨价物', '跟投方', '点赞方', '晋级方', '晋级赛事', '求婚对象', '败者', '下架方', '召回方', '停职人员', '分手双方', '罚款金额', '举报发起方', '冠军']。根据事件类型列表和论元角色列表从给定的输入中抽取可能的事件。请以json[{'trigger':'', 'type':'', 'arguments': {角色:论元}},]的格式回答。\n答案："
messages = [
    # {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": prompt}
]
text = tokenizer.apply_chat_template(
    messages,
    tokenize=False,
    add_generation_prompt=True
)
model_inputs = tokenizer([text], return_tensors="pt").to(device)

generated_ids = model.generate(
    model_inputs.input_ids,
    max_new_tokens=2048,
    do_sample=False,
    top_p=1.0,
)
generated_ids = [
    output_ids[len(input_ids):] for input_ids, output_ids in zip(model_inputs.input_ids, generated_ids)
]

response = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]
print(response)

# streamer = TextIteratorStreamer(tokenizer, skip_prompt=True, skip_special_tokens=True)
# text = tokenizer([text], return_tensors="pt").input_ids.to(device)
# generation_kwargs = dict(inputs=text,
#                          streamer=streamer,
#                          max_new_tokens=1024,
#                          do_sample=True,
#                          top_p=0.8,
#                          temperature=0.8,
#                          )
# thread = Thread(target=model.generate, kwargs=generation_kwargs)
# thread.start()
# for new_text in streamer:
#     print(json.dumps({"response": new_text}, ensure_ascii=False))
